// SPDX-License-Identifier: GPL-3.0

// pragma line - what version compiling should be running
// ^ - anything above; keep version up to date
pragma solidity ^0.8.0;

// single-line comment
/*
multi-line comment
*/
// NatSpec comment - https://docs.soliditylang.org/en/v0.8.13/natspec-format.html
// commenting format
// we can be intentional about our comments
// informative messages
/**
NatSpec multi-line comment
*/

// everything is contained within this 'contract' box
// every smart contract has a unique address that can be interacted with
/// @title The best smart contract
/// @author KyleC
/// @dev Please use this in this or that way
// define variable - string public name
// what we did here was create a 'contract call' to read data; this doesnt send a transaction and it costs nothing
// if we go to 'etherscan', we can 'read' or 'call' aspects of those contracts .. same thing here
// 'public' creates a 'getter'; allows smart contract to get/retrieve
// we can create 'setters' or 'write' functions that allow something to happen; this does send a transaction and has a cost
// let's create a function that will update the name
// function naming convention - CamelCase
// Deploy > name (Kyle) > updateName > name (John)
// we can add 'parameters' in the function (); usually start with an _
// to make this possible, we need to also declare the type; 'string'; also add 'memory'
// we can use this new function for a user to input their own name
// we can go to 'etherscan' to write to contracts .. similar here
contract MyContract {
    string public name = "Kyle";

    function updateName() public {
        name = "John";
    }

    /// @notice This function changes the name of the name
    function updateNameName(string memory _newName) public {
        name = _newName;
    }
}










